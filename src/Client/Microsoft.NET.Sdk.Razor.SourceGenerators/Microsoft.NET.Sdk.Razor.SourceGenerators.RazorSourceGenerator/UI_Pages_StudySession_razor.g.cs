#pragma checksum "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "d3a82b58cc762bf029f00820ca6af80b87a4f5dfcf7be6e8f6bda3b840114b6e"
// <auto-generated/>
#pragma warning disable 1591
namespace GakuGym.Client.UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using GakuGym.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Code\GakuGym\public\src\Client\_Imports.razor"
using GakuGym.Common;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/study-session/{RouteStudyId:guid}")]
    public partial class StudySession : BaseComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "id", "studySessionBody");
#nullable restore
#line 5 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
     if(!done)
    {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(2, "div");
            __builder.AddAttribute(3, "id", "templateOutput");
#nullable restore
#line (8,11)-(8,39) 24 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
__builder.AddContent(4, (MarkupString)templateOutput);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(5, "\n    ");
            __builder.OpenElement(6, "div");
            __builder.AddAttribute(7, "id", "challengeControls");
#nullable restore
#line 11 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
         if(flipped)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(8, "button");
            __builder.AddAttribute(9, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 13 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
                              OnFailButtonClick

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(10, "Fail");
            __builder.CloseElement();
            __builder.AddMarkupContent(11, "\n            ");
            __builder.OpenElement(12, "button");
            __builder.AddAttribute(13, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 14 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
                              OnPassButtonClick

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(14, "Pass");
            __builder.CloseElement();
#nullable restore
#line 15 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
        }
        else
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(15, "button");
            __builder.AddAttribute(16, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 18 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
                              OnShowButtonClick

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(17, "Show");
            __builder.CloseElement();
#nullable restore
#line 19 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
        }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
#nullable restore
#line 21 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
    }
    else
    {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(18, "<div id=\"doneMessage\">Done.</div>");
#nullable restore
#line 25 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
    }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 29 "D:\Code\GakuGym\public\src\Client\UI\Pages\StudySession.razor"
 
    [Parameter]
    public Guid RouteStudyId { get; set; }

    FactChallengeData?       currentChallengeData;
    Study?                   study;
    Challenge?               currentChallenge;
    Fact?                    currentFact;
    Category?                currentCategory;
    string                   templateOutput = "";
    bool                     flipped;
    bool                     done = false;
    List<FactChallengeData>? challenges;

    async Task<List<FactChallengeData>> GetNewChallenges()
    {
        var newChallenges = new List<FactChallengeData>();

        foreach(var factGroup in study.factGroups)
            newChallenges.AddRange(await API.GetStudySessionNewChallenges(factGroup.categoryId, study.lastNewChallengeDateTime));

        return newChallenges;
    }

    async Task<List<FactChallengeData>> GetReviews()
    {
        var reviews = new List<FactChallengeData>();

        foreach(var factGroup in study.factGroups)
            reviews.AddRange(await API.GetStudySessionReviewChallenges(factGroup.categoryId));

        return reviews;
    }

    FactChallengeData? DrawChallenge()
    {
        var next = challenges!.OrderBy(x => x.status switch
        {
            null        => 1,
            "learning"  => 2,
            "reviewing" => 3,
            "relapse"   => 4
        }).FirstOrDefault(x => x.status != "reviewing");

        if(next != null)
            challenges!.Remove(next);

        return next;
    }

    string RenderTemplate(string template, Dictionary<string,string> values)
    {
        var output = template;

        foreach (var kv in values)
            output = output.Replace(kv.Key, kv.Value);

        return output;
    }

    void SetTemplate(string template)
    {
        templateOutput = RenderTemplate(template, currentFact.fieldData.ToDictionary(x => currentCategory.fields.First(y => y.guid == x.Key).name, x => x.Value));        
    }

    async Task ShowChallenge(FactChallengeData? challengeItem)
    {
        if(challengeItem == null)
        {
            done = true;
            return;
        }

        currentChallengeData = challengeItem;
        currentFact          = await API.GetFact(challengeItem.factId);
        currentCategory      = await API.GetCategory(currentFact.categoryId);
        currentChallenge     = await API.GetChallenge(challengeItem.challengeId);
        flipped              = false;

        SetTemplate(currentChallenge.frontTemplate);
    }

    void OnShowButtonClick()
    {
        SetTemplate(currentChallenge.backTemplate);

        flipped = true;
    }

    async Task OnPassButtonClick()
    {
        await RecordResult(true);
    }

    async Task OnFailButtonClick()
    {
        await RecordResult(false);
    }

    async Task RecordResult(bool passed)
    {
        currentChallengeData.lastChallenged = DateTimeOffset.Now;

        switch(currentChallengeData.status)
        {
            case null:
                if(passed)
                {
                    currentChallengeData.status = "reviewing";                    
                }
                else
                {
                    currentChallengeData.status = "learning";
                }
                break;
            case "learning":
                if(passed)
                {
                    currentChallengeData.status = "reviewing";                    
                }
                else
                {
                    currentChallengeData.status = "learning";
                }                
                break;
            case "reviewing":
                if(passed)
                {
                    currentChallengeData.status = "reviewing";                    
                }
                else
                {
                    currentChallengeData.status = "relapse";
                }                
                break;
            case "relapse":
                if(passed)
                {
                    currentChallengeData.status = "reviewing";                    
                }
                else
                {
                    currentChallengeData.status = "learning";
                }                
                break;
        }

        currentChallengeData = await API.SaveFactChallengeData(currentChallengeData);

        challenges.Add(currentChallengeData);

        await ShowChallenge(DrawChallenge());
    }

    async Task FetchChallenges()
    {
        challenges = (await GetNewChallenges()).Union(await GetReviews()).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        study = await API.GetStudy(RouteStudyId); 
        
        await FetchChallenges();

        await ShowChallenge(DrawChallenge());
    }


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
