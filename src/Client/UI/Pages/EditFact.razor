@page "/fact-database/fact/{RouteFactId:guid}/edit"

@inherits BaseComponent

@if(category != null && fieldValues != null)
{
	<div id="pageHeader">
	    <span id="pageHeaderLeft">@category.name - New Fact</span>
		<span id="pageHeaderRight">
			<button class="SecondaryButton" @onclick="OnCloseClick"><svg class="icon"><use xlink:href="#close"/></svg></button>
		</span>
	</div>
	<div id="pageBody">

		@foreach(var field in fieldValues)
		{
			<div class="inputWrapper">
				<label>@field.fieldName</label>
				<input type="text" @bind-value="@field.value">
			</div>
		}
		<div>
			<button @onclick="OnSaveFactClick">Save Fact</button>
		</div>
	</div>
}

@code 
{
	[Parameter]
	public Guid RouteFactId { get; set; }

	class FactFieldModel
	{
		public Guid guid;
		public string fieldName;
		public string value;
	}

    List<FactFieldModel>? fieldValues;
	Fact?                 fact;
	Category?             category;

	protected override async Task OnParametersSetAsync()
	{
		fact     = await API.GetFact(RouteFactId);
		category = await API.GetCategory(fact.categoryId);

		fieldValues = category.fields.Select(x => new FactFieldModel 
		{ 
			guid      = x.guid, 
			fieldName = x.name, 
			value     = fact.fieldData[x.guid] 
		}).ToList();		
	}

	void OnCloseClick()
	{
		NavigationManager.NavigateTo($"/fact-database/category/{fact.categoryId}");		
	}

	async Task OnSaveFactClick()
	{
		await API.UpdateFact(new Fact
		{
			guid      = fact.guid,
			fieldData = fieldValues.ToDictionary(x => x.guid, x => x.value)
		});

		NavigationManager.NavigateTo($"/fact-database/category/{category.guid}");
	}
}
