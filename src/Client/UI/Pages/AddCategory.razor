@page "/fact-database/domain/{RouteDomainId:guid}/add-category"
@inherits BaseComponent

<div id="pageHeader">
	<span id="pageHeaderLeft">Add Category</span>
	<span id="pageHeaderRight"><button class="SecondaryButton" @onclick="OnCloseClick"><svg class="icon"><use xlink:href="#close"/></svg></button></span>
</div>
<div id="pageBody">

	<div class="inputWrapper">
		<label>Name</label>
		<input type="text" @bind-value="categoryNameText" />
	</div>
	<div class="inputWrapper">
		<label>Description</label>
		<input type="text" @bind-value="categoryDescriptionText">
	</div>
	<div class="listHeader">
		<span>Fields</span>
		<button class="SecondaryButton" @onclick="OnAddFieldClick"><svg class="icon"><use xlink:href="#add"/></svg></button>
	</div>

	@foreach(var field in fields)
	{
		<div>
			<div class="inputWrapper">
				<label>Name</label> 
				<input type="text" @bind-value="field.name">
			</div>
			<div class="inputWrapper">
				<input type="text" @bind-value="field.description">
				<label>Description</label> 
			</div>
			<div class="inputWrapper">
				<select>
					<option>Text</option>
					<option>HTML</option>
					<option>Image</option>
					<option>Audio</option>
					<option>Numeric</option>
				</select>
				<label>Interpretation</label> 
			</div>
			<button @onclick="() => OnRemoveFieldClick(field)">Remove</button>
		</div>	
	}
	<button @onclick="OnCreateButtonClick">Create</button>
</div>
@code 
{
	[Parameter]
	public Guid RouteDomainId { get; set; }

	string? categoryNameText;
	string? categoryDescriptionText;

	class CategoryField
	{
		public string? name;
		public string? description;
		public string? interpretation;
	}

    List<CategoryField> fields = new();

	void OnCloseClick()
	{
		NavigationManager.NavigateTo($"/fact-database/domain/{RouteDomainId}");		
	}

	void OnAddFieldClick()
	{
		fields.Add(new());
	}

	void OnRemoveFieldClick(CategoryField categoryField)
	{
		fields.Remove(categoryField);
	}

	async Task OnCreateButtonClick()
	{
		await API.CreateCategory(RouteDomainId, categoryNameText, categoryDescriptionText, fields.Select(x => (x.name, x.description, FieldType.Text)).ToList());

		NavigationManager.NavigateTo($"/fact-database/domain/{RouteDomainId}");
	}
}
